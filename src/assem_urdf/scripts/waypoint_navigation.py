#!/usr/bin/env python3
"""
Script ƒëi·ªÅu h∆∞·ªõng waypoint cho robot ƒëi m·ªôt v√≤ng qua c√°c ƒëi·ªÉm tr√™n map
D·ª±a tr√™n Nav2 Simple Commander - follow_waypoints.py
"""

from geometry_msgs.msg import PoseStamped
from nav2_simple_commander.robot_navigator import BasicNavigator, TaskResult
import rclpy
from rclpy.duration import Duration
import yaml
import math

# ƒê·ªãnh nghƒ©a waypoints b·∫±ng YAML (d·ªÖ ch·ªânh s·ª≠a)
waypoints_yaml = '''
waypoints:
  - position:
      x: 1.0
      y: 0.0
      z: 0.0
    orientation:
      x: 0.0
      y: 0.0
      z: 0.0
      w: 1.0
  - position:
      x: 1.0
      y: 1.0
      z: 0.0
    orientation:
      x: 0.0
      y: 0.0
      z: 0.7071068
      w: 0.7071068
  - position:
      x: 0.0
      y: 1.0
      z: 0.0
    orientation:
      x: 0.0
      y: 0.0
      z: 1.0
      w: 0.0
  - position:
      x: -1.0
      y: 1.0
      z: 0.0
    orientation:
      x: 0.0
      y: 0.0
      z: 1.0
      w: 0.0
  - position:
      x: -1.0
      y: 0.0
      z: 0.0
    orientation:
      x: 0.0
      y: 0.0
      z: -0.7071068
      w: 0.7071068
  - position:
      x: -1.0
      y: -1.0
      z: 0.0
    orientation:
      x: 0.0
      y: 0.0
      z: -0.7071068
      w: 0.7071068
  - position:
      x: 0.0
      y: -1.0
      z: 0.0
    orientation:
      x: 0.0
      y: 0.0
      z: 0.0
      w: 1.0
  - position:
      x: 1.0
      y: -1.0
      z: 0.0
    orientation:
      x: 0.0
      y: 0.0
      z: 0.0
      w: 1.0
  - position:
      x: 1.0
      y: 0.0
      z: 0.0
    orientation:
      x: 0.0
      y: 0.0
      z: 0.7071068
      w: 0.7071068
  - position:
      x: 0.0
      y: 0.0
      z: 0.0
    orientation:
      x: 0.0
      y: 0.0
      z: 0.0
      w: 1.0
'''

# Waypoints nh·ªè h∆°n ƒë·ªÉ test an to√†n
small_waypoints_yaml = '''
waypoints:
  - position:
      x: 0.5
      y: 0.0
      z: 0.0
    orientation:
      x: 0.0
      y: 0.0
      z: 0.0
      w: 1.0
  - position:
      x: 0.5
      y: 0.5
      z: 0.0
    orientation:
      x: 0.0
      y: 0.0
      z: 0.7071068
      w: 0.7071068
  - position:
      x: 0.0
      y: 0.5
      z: 0.0
    orientation:
      x: 0.0
      y: 0.0
      z: 1.0
      w: 0.0
  - position:
      x: 0.0
      y: 0.0
      z: 0.0
    orientation:
      x: 0.0
      y: 0.0
      z: 0.0
      w: 1.0
'''

def create_pose_from_yaml(navigator, transform):
    """T·∫°o PoseStamped t·ª´ YAML transform (gi·ªëng follow_waypoints.py)"""
    pose = PoseStamped()
    pose.header.frame_id = 'map'
    pose.header.stamp = navigator.get_clock().now().to_msg()
    pose.pose.position.x = transform["position"]["x"]
    pose.pose.position.y = transform["position"]["y"]
    pose.pose.position.z = transform["position"]["z"]
    pose.pose.orientation.x = transform["orientation"]["x"]
    pose.pose.orientation.y = transform["orientation"]["y"]
    pose.pose.orientation.z = transform["orientation"]["z"]
    pose.pose.orientation.w = transform["orientation"]["w"]
    return pose

def create_pose_from_coords(navigator, x, y, yaw_degrees):
    """T·∫°o PoseStamped t·ª´ t·ªça ƒë·ªô x, y, yaw (ti·ªán l·ª£i h∆°n)"""
    pose = PoseStamped()
    pose.header.frame_id = 'map'
    pose.header.stamp = navigator.get_clock().now().to_msg()
    
    # V·ªã tr√≠
    pose.pose.position.x = float(x)
    pose.pose.position.y = float(y)
    pose.pose.position.z = 0.0
    
    # Chuy·ªÉn ƒë·ªïi g√≥c t·ª´ degrees sang quaternion
    yaw_radians = math.radians(yaw_degrees)
    pose.pose.orientation.x = 0.0
    pose.pose.orientation.y = 0.0
    pose.pose.orientation.z = math.sin(yaw_radians / 2.0)
    pose.pose.orientation.w = math.cos(yaw_radians / 2.0)
    
    return pose

def navigate_waypoints(waypoints_data, timeout_seconds=600, loop_count=1):
    """
    H√†m ch√≠nh ƒë·ªÉ ƒëi·ªÅu h∆∞·ªõng waypoints
    Args:
        waypoints_data: YAML string ch·ª©a waypoints
        timeout_seconds: Timeout cho navigation (gi√¢y)
        loop_count: S·ªë v√≤ng l·∫∑p
    """
    rclpy.init()
    navigator = BasicNavigator()
    
    # Parse waypoints t·ª´ YAML
    waypoints = yaml.safe_load(waypoints_data)
    
    # T·∫°o danh s√°ch poses
    goal_poses = list(map(lambda transform: create_pose_from_yaml(navigator, transform), 
                         waypoints["waypoints"]))
    
    print(f'ƒê√£ t·∫°o {len(goal_poses)} waypoints')
    for i, wp in enumerate(waypoints["waypoints"]):
        pos = wp["position"]
        print(f'Waypoint {i+1}: x={pos["x"]:.2f}, y={pos["y"]:.2f}')
    
    # ƒê·ª£i Nav2 kh·ªüi ƒë·ªông ho√†n to√†n
    navigator.waitUntilNav2Active()
    print('üöÄ Nav2 ƒë√£ s·∫µn s√†ng!')
    
    # Th·ª±c hi·ªán navigation theo s·ªë v√≤ng l·∫∑p
    for loop in range(loop_count):
        if loop_count > 1:
            print(f'\n--- V√≤ng {loop + 1}/{loop_count} ---')
        
        # B·∫Øt ƒë·∫ßu navigation
        nav_start = navigator.get_clock().now()
        navigator.followWaypoints(goal_poses)
        
        # Theo d√µi ti·∫øn tr√¨nh
        i = 0
        while not navigator.isTaskComplete():
            # C·∫≠p nh·∫≠t feedback
            i = i + 1
            feedback = navigator.getFeedback()
            
            if feedback and i % 5 == 0:  # In log m·ªói 5 gi√¢y
                print(f'ƒêang th·ª±c hi·ªán waypoint: {feedback.current_waypoint + 1}/{len(goal_poses)}')
                now = navigator.get_clock().now()
                
                # Timeout ƒë·ªÉ tr√°nh k·∫πt v√¥ h·∫°n
                if now - nav_start > Duration(seconds=timeout_seconds):
                    print(f'‚è∞ Timeout sau {timeout_seconds} gi√¢y, h·ªßy nhi·ªám v·ª•...')
                    navigator.cancelTask()
                    break
        
        # Ki·ªÉm tra k·∫øt qu·∫£
        result = navigator.getResult()
        if result == TaskResult.SUCCEEDED:
            print('üéâ Ho√†n th√†nh waypoints th√†nh c√¥ng!')
        elif result == TaskResult.CANCELED:
            print('‚ö†Ô∏è Nhi·ªám v·ª• b·ªã h·ªßy!')
            break
        elif result == TaskResult.FAILED:
            print('‚ùå Nhi·ªám v·ª• th·∫•t b·∫°i!')
            break
        else:
            print(f'‚ùì K·∫øt qu·∫£ kh√¥ng x√°c ƒë·ªãnh: {result}')
            break
        
        # Ngh·ªâ gi·ªØa c√°c v√≤ng l·∫∑p
        if loop < loop_count - 1:
            print('Ngh·ªâ 3 gi√¢y tr∆∞·ªõc v√≤ng ti·∫øp theo...')
            rclpy.spin_once(navigator, timeout_sec=3.0)
    
    print('üèÅ K·∫øt th√∫c navigation!')
    rclpy.shutdown()

def main():
    print("\n=== WAYPOINT NAVIGATION ===")
    print("1. Test nh·ªè (h√¨nh vu√¥ng 0.5x0.5m)")
    print("2. V√≤ng l·ªõn (h√¨nh vu√¥ng 2x2m)")
    print("3. Nhi·ªÅu v√≤ng nh·ªè (3 l·∫ßn)")
    print("4. Nhi·ªÅu v√≤ng l·ªõn (3 l·∫ßn)")
    print("5. T√πy ch·ªânh")
    
    try:
        choice = input("Ch·ªçn ch·∫ø ƒë·ªô (1-5): ").strip()
        
        if choice == "1":
            print("üî∏ Ch·∫°y test nh·ªè...")
            navigate_waypoints(small_waypoints_yaml, timeout_seconds=300, loop_count=1)
            
        elif choice == "2":
            print("üîπ Ch·∫°y v√≤ng l·ªõn...")
            navigate_waypoints(waypoints_yaml, timeout_seconds=600, loop_count=1)
            
        elif choice == "3":
            print("üî∏ Ch·∫°y 3 v√≤ng nh·ªè...")
            navigate_waypoints(small_waypoints_yaml, timeout_seconds=300, loop_count=3)
            
        elif choice == "4":
            print("üîπ Ch·∫°y 3 v√≤ng l·ªõn...")
            navigate_waypoints(waypoints_yaml, timeout_seconds=600, loop_count=3)
            
        elif choice == "5":
            try:
                size = input("K√≠ch th∆∞·ªõc (small/large): ").strip().lower()
                loops = int(input("S·ªë v√≤ng: "))
                timeout = int(input("Timeout (gi√¢y, m·∫∑c ƒë·ªãnh 600): ") or "600")
                
                if size == "small":
                    waypoints_data = small_waypoints_yaml
                else:
                    waypoints_data = waypoints_yaml
                    
                navigate_waypoints(waypoints_data, timeout_seconds=timeout, loop_count=loops)
                
            except ValueError:
                print("‚ùå Gi√° tr·ªã kh√¥ng h·ª£p l·ªá!")
                
        else:
            print("‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá! Ch·∫°y test nh·ªè...")
            navigate_waypoints(small_waypoints_yaml, timeout_seconds=300, loop_count=1)
            
    except KeyboardInterrupt:
        print("\nüõë D·ª´ng ch∆∞∆°ng tr√¨nh b·ªüi ng∆∞·ªùi d√πng")
    except Exception as e:
        print(f"‚ùå L·ªói: {e}")

if __name__ == '__main__':
    main() 